
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ExpertConsensusScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  expertMean: 'expertMean',
  expertStd: 'expertStd',
  expertCount: 'expertCount',
  individualRatings: 'individualRatings',
  firstRating: 'firstRating',
  lastRating: 'lastRating',
  lastRefreshed: 'lastRefreshed'
};

exports.Prisma.BenchmarkScoreAggregateScalarFieldEnum = {
  id: 'id',
  modelVersionId: 'modelVersionId',
  scaleId: 'scaleId',
  hyperparameterHash: 'hyperparameterHash',
  hyperparameterConfig: 'hyperparameterConfig',
  systemPromptId: 'systemPromptId',
  messagePromptId: 'messagePromptId',
  runCount: 'runCount',
  modelMean: 'modelMean',
  modelStd: 'modelStd',
  modelMin: 'modelMin',
  modelMax: 'modelMax',
  modelMedian: 'modelMedian',
  expertConsensusMean: 'expertConsensusMean',
  rmseVsExperts: 'rmseVsExperts',
  firstRun: 'firstRun',
  lastRun: 'lastRun',
  experimentCount: 'experimentCount',
  lastRefreshed: 'lastRefreshed'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshTokenHash: 'refreshTokenHash',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.BenchmarkScaleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  scaleType: 'scaleType',
  version: 'version',
  isValidated: 'isValidated',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BenchmarkQuestionSubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  promptValue: 'promptValue',
  response1Value: 'response1Value',
  response2Value: 'response2Value',
  rating1: 'rating1',
  rating2: 'rating2',
  instructionPrompt: 'instructionPrompt',
  notes: 'notes',
  metadata: 'metadata',
  status: 'status',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt'
};

exports.Prisma.BenchmarkQuestionScalarFieldEnum = {
  id: 'id',
  scaleId: 'scaleId',
  position: 'position',
  promptId: 'promptId',
  promptValue: 'promptValue',
  responseId: 'responseId',
  responseValue: 'responseValue',
  isValidated: 'isValidated',
  isUserSubmitted: 'isUserSubmitted',
  metadata: 'metadata',
  adversarialType: 'adversarialType',
  adversarialCategory: 'adversarialCategory',
  difficultyLevel: 'difficultyLevel',
  expectedFailureMode: 'expectedFailureMode',
  successCriteria: 'successCriteria',
  adversarialMetadata: 'adversarialMetadata',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BenchmarkRatingScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  userId: 'userId',
  rating: 'rating',
  confidence: 'confidence',
  reasoning: 'reasoning',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.BenchmarkTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BenchmarkTagQuestionLinkScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  tagId: 'tagId'
};

exports.Prisma.BenchmarkExperimentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  scaleId: 'scaleId',
  name: 'name',
  description: 'description',
  entityType: 'entityType',
  entityIds: 'entityIds',
  config: 'config',
  status: 'status',
  taskId: 'taskId',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost',
  progress: 'progress',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorMessage: 'errorMessage',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BenchmarkPromptScalarFieldEnum = {
  id: 'id',
  name: 'name',
  promptType: 'promptType',
  content: 'content',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.BenchmarkResultScalarFieldEnum = {
  id: 'id',
  experimentId: 'experimentId',
  repeatNumber: 'repeatNumber',
  modelVersionId: 'modelVersionId',
  toolConfigurationId: 'toolConfigurationId',
  questionId: 'questionId',
  hyperparameterConfig: 'hyperparameterConfig',
  hyperparameterHash: 'hyperparameterHash',
  systemPromptId: 'systemPromptId',
  messagePromptId: 'messagePromptId',
  score: 'score',
  reasoning: 'reasoning',
  rawResponse: 'rawResponse',
  responseTimeMs: 'responseTimeMs',
  tokenUsage: 'tokenUsage',
  status: 'status',
  errorType: 'errorType',
  errorMessage: 'errorMessage',
  apiCost: 'apiCost',
  isApproved: 'isApproved',
  approvalSource: 'approvalSource',
  createdAt: 'createdAt'
};

exports.Prisma.ReasoningEntryScalarFieldEnum = {
  id: 'id',
  benchmarkResultId: 'benchmarkResultId',
  reasoningType: 'reasoningType',
  content: 'content',
  sequenceOrder: 'sequenceOrder',
  confidenceLevel: 'confidenceLevel',
  processingTimeMs: 'processingTimeMs',
  metadata: 'metadata',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UpdateScalarFieldEnum = {
  id: 'id',
  date: 'date',
  title: 'title',
  tag: 'tag',
  note: 'note',
  imageUrl: 'imageUrl',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.UpdateReactionScalarFieldEnum = {
  id: 'id',
  updateId: 'updateId',
  userId: 'userId',
  emojiType: 'emojiType',
  createdAt: 'createdAt'
};

exports.Prisma.SuggestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  voteCount: 'voteCount',
  isVisible: 'isVisible',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.SuggestionVoteScalarFieldEnum = {
  id: 'id',
  suggestionId: 'suggestionId',
  userId: 'userId',
  voteValue: 'voteValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  displayName: 'displayName',
  role: 'role',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  modelFamilyId: 'modelFamilyId',
  developer: 'developer',
  description: 'description',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ModelVersionScalarFieldEnum = {
  id: 'id',
  modelId: 'modelId',
  version: 'version',
  releaseDate: 'releaseDate',
  deprecationDate: 'deprecationDate',
  isLatest: 'isLatest',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ModelFamilyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ToolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  version: 'version',
  developer: 'developer',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ToolConfigurationScalarFieldEnum = {
  id: 'id',
  toolId: 'toolId',
  modelId: 'modelId',
  configurationName: 'configurationName',
  configurationSettings: 'configurationSettings',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.EvaluationEntityScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  modelVersionId: 'modelVersionId',
  toolConfigurationId: 'toolConfigurationId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.HyperparameterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  parameterType: 'parameterType',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ModelHyperparameterLinkScalarFieldEnum = {
  id: 'id',
  modelVersionId: 'modelVersionId',
  hyperparameterId: 'hyperparameterId',
  isConfigurable: 'isConfigurable',
  isRequired: 'isRequired',
  lockedValue: 'lockedValue',
  lockedAt: 'lockedAt',
  lockedReason: 'lockedReason',
  minValue: 'minValue',
  maxValue: 'maxValue',
  stepValue: 'stepValue',
  allowedValues: 'allowedValues',
  defaultValue: 'defaultValue',
  uiComponent: 'uiComponent',
  uiOrder: 'uiOrder',
  helpText: 'helpText',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ResponseProfileTestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  testType: 'testType',
  version: 'version',
  isValidated: 'isValidated',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ResponseProfileQuestionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  questionType: 'questionType',
  questionKey: 'questionKey',
  questionText: 'questionText',
  category: 'category',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  isDisplayed: 'isDisplayed',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ResponseProfileAnswerScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  entityType: 'entityType',
  entityId: 'entityId',
  evaluationEntityId: 'evaluationEntityId',
  booleanValue: 'booleanValue',
  numericValue: 'numericValue',
  textValue: 'textValue',
  listValue: 'listValue',
  notes: 'notes',
  reviewerId: 'reviewerId',
  reviewAssignmentId: 'reviewAssignmentId',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy'
};

exports.Prisma.ProfileReviewAssignmentScalarFieldEnum = {
  id: 'id',
  reviewerId: 'reviewerId',
  entityType: 'entityType',
  entityId: 'entityId',
  evaluationEntityId: 'evaluationEntityId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy',
  dueDate: 'dueDate',
  status: 'status',
  completedAt: 'completedAt',
  notes: 'notes'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  configType: 'configType',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TechProfileQuestionScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  questionKey: 'questionKey',
  questionText: 'questionText',
  category: 'category',
  questionType: 'questionType',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  isDisplayed: 'isDisplayed',
  isFilterable: 'isFilterable',
  filterType: 'filterType',
  filterConfig: 'filterConfig',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TechProfileAnswerScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  evaluationEntityId: 'evaluationEntityId',
  questionId: 'questionId',
  answer: 'answer',
  notes: 'notes',
  reviewerId: 'reviewerId',
  reviewAssignmentId: 'reviewAssignmentId',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  isVerified: 'isVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  lastLoginAt: 'lastLoginAt',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserExpertiseHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expertiseLevel: 'expertiseLevel',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  assignedBy: 'assignedBy',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permission: 'permission',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AdversarialType = exports.$Enums.AdversarialType = {
  RED_HERRING: 'RED_HERRING',
  TEMPORAL_ANCHORING: 'TEMPORAL_ANCHORING',
  COGNITIVE_BIAS: 'COGNITIVE_BIAS',
  CONTEXT_CONFUSION: 'CONTEXT_CONFUSION',
  PREMISE_DISTORTION: 'PREMISE_DISTORTION'
};

exports.EntityType = exports.$Enums.EntityType = {
  MODEL_VERSION: 'MODEL_VERSION',
  TOOL_CONFIGURATION: 'TOOL_CONFIGURATION'
};

exports.ReasoningType = exports.$Enums.ReasoningType = {
  CHAIN_OF_THOUGHT: 'CHAIN_OF_THOUGHT',
  EXPLANATION: 'EXPLANATION',
  WORKING: 'WORKING',
  REFLECTION: 'REFLECTION'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  BOOLEAN: 'BOOLEAN',
  NUMBER: 'NUMBER',
  TEXT: 'TEXT',
  LIST: 'LIST'
};

exports.ReviewStatus = exports.$Enums.ReviewStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED: 'SUBMITTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  RESEARCHER: 'RESEARCHER'
};

exports.ExpertiseCategory = exports.$Enums.ExpertiseCategory = {
  EXPERT: 'EXPERT',
  PROFESSIONAL: 'PROFESSIONAL',
  TRAINEE: 'TRAINEE',
  STUDENT: 'STUDENT',
  PUBLIC: 'PUBLIC'
};

exports.Prisma.ModelName = {
  ExpertConsensus: 'ExpertConsensus',
  BenchmarkScoreAggregate: 'BenchmarkScoreAggregate',
  UserSession: 'UserSession',
  EmailVerificationToken: 'EmailVerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  BenchmarkScale: 'BenchmarkScale',
  BenchmarkQuestionSubmission: 'BenchmarkQuestionSubmission',
  BenchmarkQuestion: 'BenchmarkQuestion',
  BenchmarkRating: 'BenchmarkRating',
  BenchmarkTag: 'BenchmarkTag',
  BenchmarkTagQuestionLink: 'BenchmarkTagQuestionLink',
  BenchmarkExperiment: 'BenchmarkExperiment',
  BenchmarkPrompt: 'BenchmarkPrompt',
  BenchmarkResult: 'BenchmarkResult',
  ReasoningEntry: 'ReasoningEntry',
  Update: 'Update',
  UpdateReaction: 'UpdateReaction',
  Suggestion: 'Suggestion',
  SuggestionVote: 'SuggestionVote',
  TeamMember: 'TeamMember',
  Model: 'Model',
  ModelVersion: 'ModelVersion',
  ModelFamily: 'ModelFamily',
  Tool: 'Tool',
  ToolConfiguration: 'ToolConfiguration',
  EvaluationEntity: 'EvaluationEntity',
  Hyperparameter: 'Hyperparameter',
  ModelHyperparameterLink: 'ModelHyperparameterLink',
  ResponseProfileTest: 'ResponseProfileTest',
  ResponseProfileQuestion: 'ResponseProfileQuestion',
  ResponseProfileAnswer: 'ResponseProfileAnswer',
  ProfileReviewAssignment: 'ProfileReviewAssignment',
  SystemConfig: 'SystemConfig',
  TechProfileQuestion: 'TechProfileQuestion',
  TechProfileAnswer: 'TechProfileAnswer',
  User: 'User',
  UserExpertiseHistory: 'UserExpertiseHistory',
  UserPermission: 'UserPermission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
