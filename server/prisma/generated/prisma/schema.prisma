// server/prisma/schema/_config.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExpertConsensus {
  id                String   @id @default(uuid())
  questionId        String   @unique @map("question_id")
  expertMean        Float    @map("expert_mean")
  expertStd         Float?   @map("expert_std")
  expertCount       Int      @map("expert_count")
  individualRatings Json?    @map("individual_ratings")
  firstRating       DateTime @map("first_rating")
  lastRating        DateTime @map("last_rating")
  lastRefreshed     DateTime @default(now()) @map("last_refreshed")

  question BenchmarkQuestion @relation(fields: [questionId], references: [id])

  @@index([expertCount])
  @@index([lastRefreshed])
  @@map("expert_consensus")
}

model BenchmarkScoreAggregate {
  id                   String   @id @default(uuid())
  modelVersionId       String   @map("model_version_id")
  scaleId              String   @map("scale_id")
  hyperparameterHash   String?  @map("hyperparameter_hash")
  hyperparameterConfig Json?    @map("hyperparameter_config")
  systemPromptId       String?  @map("system_prompt_id")
  messagePromptId      String?  @map("message_prompt_id")
  runCount             Int      @map("run_count")
  modelMean            Float    @map("model_mean")
  modelStd             Float?   @map("model_std")
  modelMin             Float?   @map("model_min")
  modelMax             Float?   @map("model_max")
  modelMedian          Float?   @map("model_median")
  expertConsensusMean  Float?   @map("expert_consensus_mean")
  rmseVsExperts        Float?   @map("rmse_vs_experts")
  firstRun             DateTime @map("first_run")
  lastRun              DateTime @map("last_run")
  experimentCount      Int      @map("experiment_count")
  lastRefreshed        DateTime @default(now()) @map("last_refreshed")

  modelVersion  ModelVersion     @relation(fields: [modelVersionId], references: [id])
  scale         BenchmarkScale   @relation(fields: [scaleId], references: [id])
  systemPrompt  BenchmarkPrompt? @relation("AggregateSystemPrompt", fields: [systemPromptId], references: [id])
  messagePrompt BenchmarkPrompt? @relation("AggregateMessagePrompt", fields: [messagePromptId], references: [id])

  @@unique([modelVersionId, scaleId, hyperparameterHash, systemPromptId, messagePromptId])
  @@index([scaleId, rmseVsExperts])
  @@index([runCount])
  @@index([lastRefreshed])
  @@map("benchmark_score_aggregates")
}

model UserSession {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  refreshTokenHash String    @map("refresh_token_hash")
  expiresAt        DateTime  @map("expires_at")
  ipAddress        String?   @map("ip_address") @db.Inet
  userAgent        String?   @map("user_agent")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_sessions")
}

model EmailVerificationToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model BenchmarkScale {
  id          String    @id @default(uuid())
  name        String
  description String?
  scaleType   String    @map("scale_type")
  version     Int       @default(1)
  isValidated Boolean   @default(false) @map("is_validated")
  isPublic    Boolean   @default(false) @map("is_public")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  createdByUser   User?                     @relation("BenchmarkScaleCreatedBy", fields: [createdBy], references: [id])
  updatedByUser   User?                     @relation("BenchmarkScaleUpdatedBy", fields: [updatedBy], references: [id])
  questions       BenchmarkQuestion[]
  experiments     BenchmarkExperiment[]
  scoreAggregates BenchmarkScoreAggregate[]

  @@map("benchmark_scales")
}

model BenchmarkQuestionSubmission {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  promptValue       String    @map("prompt_value")
  response1Value    String    @map("response_1_value")
  response2Value    String    @map("response_2_value")
  rating1           Float     @map("rating_1")
  rating2           Float     @map("rating_2")
  instructionPrompt String?   @map("instruction_prompt")
  notes             String?
  metadata          Json?
  status            String    @default("pending")
  reviewedBy        String?   @map("reviewed_by")
  reviewedAt        DateTime? @map("reviewed_at")
  rejectionReason   String?   @map("rejection_reason")
  createdAt         DateTime  @default(now()) @map("created_at")

  user     User  @relation(fields: [userId], references: [id])
  reviewer User? @relation("QuestionReviewer", fields: [reviewedBy], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("benchmark_question_submissions")
}

model BenchmarkQuestion {
  id                  String           @id @default(uuid())
  scaleId             String?          @map("scale_id")
  position            Int?
  promptId            String           @map("prompt_id")
  promptValue         String           @map("prompt_value")
  responseId          String           @map("response_id")
  responseValue       String           @map("response_value")
  isValidated         Boolean          @default(false) @map("is_validated")
  isUserSubmitted     Boolean          @default(false) @map("is_user_submitted")
  metadata            Json?
  adversarialType     AdversarialType? @map("adversarial_type")
  adversarialCategory String?          @map("adversarial_category")
  difficultyLevel     Int?             @map("difficulty_level")
  expectedFailureMode String?          @map("expected_failure_mode")
  successCriteria     String?          @map("success_criteria")
  adversarialMetadata Json?            @map("adversarial_metadata")
  createdAt           DateTime         @default(now()) @map("created_at")
  createdBy           String?          @map("created_by")
  updatedAt           DateTime?        @updatedAt @map("updated_at")
  updatedBy           String?          @map("updated_by")

  scale           BenchmarkScale?            @relation(fields: [scaleId], references: [id])
  createdByUser   User?                      @relation("BenchmarkQuestionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser   User?                      @relation("BenchmarkQuestionUpdatedBy", fields: [updatedBy], references: [id])
  ratings         BenchmarkRating[]
  results         BenchmarkResult[]
  tags            BenchmarkTagQuestionLink[]
  expertConsensus ExpertConsensus?

  @@index([scaleId])
  @@index([adversarialType])
  @@index([difficultyLevel])
  @@map("benchmark_questions")
}

model BenchmarkRating {
  id         String   @id @default(uuid())
  questionId String   @map("question_id")
  userId     String   @map("user_id")
  rating     Float
  confidence Float?
  reasoning  String?
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")

  question BenchmarkQuestion @relation(fields: [questionId], references: [id])
  user     User              @relation(fields: [userId], references: [id])

  @@index([questionId])
  @@index([userId])
  @@map("benchmark_ratings")
}

model BenchmarkTag {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  createdByUser User?                      @relation("BenchmarkTagCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?                      @relation("BenchmarkTagUpdatedBy", fields: [updatedBy], references: [id])
  questions     BenchmarkTagQuestionLink[]

  @@map("benchmark_tags")
}

model BenchmarkTagQuestionLink {
  id         String @id @default(uuid())
  questionId String @map("question_id")
  tagId      String @map("tag_id")

  question BenchmarkQuestion @relation(fields: [questionId], references: [id])
  tag      BenchmarkTag      @relation(fields: [tagId], references: [id])

  @@map("benchmark_tag_question_link")
}

model BenchmarkExperiment {
  id            String     @id @default(uuid())
  userId        String     @map("user_id")
  scaleId       String?    @map("scale_id")
  name          String
  description   String?
  entityType    EntityType @map("entity_type")
  entityIds     Json       @map("entity_ids")
  config        Json
  status        String     @default("pending")
  taskId        String?    @map("task_id")
  estimatedCost Float?     @map("estimated_cost")
  actualCost    Float?     @map("actual_cost")
  progress      Int        @default(0)
  startedAt     DateTime?  @map("started_at")
  completedAt   DateTime?  @map("completed_at")
  errorMessage  String?    @map("error_message")
  reviewedBy    String?    @map("reviewed_by")
  reviewedAt    DateTime?  @map("reviewed_at")
  reviewNotes   String?    @map("review_notes")
  isPublic      Boolean    @default(false) @map("is_public")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")
  updatedBy     String?    @map("updated_by")

  user          User              @relation(fields: [userId], references: [id])
  scale         BenchmarkScale?   @relation(fields: [scaleId], references: [id])
  updatedByUser User?             @relation("ExperimentUpdatedBy", fields: [updatedBy], references: [id])
  reviewer      User?             @relation("ExperimentReviewer", fields: [reviewedBy], references: [id])
  results       BenchmarkResult[]

  @@index([userId])
  @@index([status])
  @@index([isPublic])
  @@map("benchmark_experiments")
}

model BenchmarkPrompt {
  id         String    @id @default(uuid())
  name       String?
  promptType String    @map("prompt_type")
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  createdBy  String?   @map("created_by")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  updatedBy  String?   @map("updated_by")

  createdByUser           User?                     @relation("BenchmarkPromptCreatedBy", fields: [createdBy], references: [id])
  updatedByUser           User?                     @relation("BenchmarkPromptUpdatedBy", fields: [updatedBy], references: [id])
  systemPromptResults     BenchmarkResult[]         @relation("SystemPromptResults")
  messagePromptResults    BenchmarkResult[]         @relation("MessagePromptResults")
  systemPromptAggregates  BenchmarkScoreAggregate[] @relation("AggregateSystemPrompt")
  messagePromptAggregates BenchmarkScoreAggregate[] @relation("AggregateMessagePrompt")

  @@map("benchmark_prompts")
}

model BenchmarkResult {
  id                   String   @id @default(uuid())
  experimentId         String?  @map("experiment_id")
  repeatNumber         Int?     @map("repeat_number")
  modelVersionId       String?  @map("model_version_id")
  toolConfigurationId  String?  @map("tool_configuration_id")
  questionId           String?  @map("question_id")
  hyperparameterConfig Json?    @map("hyperparameter_config")
  hyperparameterHash   String?  @map("hyperparameter_hash")
  systemPromptId       String?  @map("system_prompt_id")
  messagePromptId      String?  @map("message_prompt_id")
  score                Int?
  reasoning            String?
  rawResponse          String?  @map("raw_response")
  responseTimeMs       Int?     @map("response_time_ms")
  tokenUsage           Json?    @map("token_usage")
  status               String   @default("pending")
  errorType            String?  @map("error_type")
  errorMessage         String?  @map("error_message")
  apiCost              Float?   @map("api_cost")
  isApproved           Boolean  @default(false) @map("is_approved")
  approvalSource       String   @default("experiment") @map("approval_source")
  createdAt            DateTime @default(now()) @map("created_at")

  experiment        BenchmarkExperiment? @relation(fields: [experimentId], references: [id])
  modelVersion      ModelVersion?        @relation(fields: [modelVersionId], references: [id])
  toolConfiguration ToolConfiguration?   @relation(fields: [toolConfigurationId], references: [id])
  question          BenchmarkQuestion?   @relation(fields: [questionId], references: [id])
  systemPrompt      BenchmarkPrompt?     @relation("SystemPromptResults", fields: [systemPromptId], references: [id])
  messagePrompt     BenchmarkPrompt?     @relation("MessagePromptResults", fields: [messagePromptId], references: [id])
  reasoningEntries  ReasoningEntry[]

  @@index([experimentId])
  @@index([modelVersionId])
  @@index([toolConfigurationId])
  @@index([questionId])
  @@index([isApproved])
  @@index([hyperparameterHash])
  @@map("benchmark_results")
}

model ReasoningEntry {
  id                String        @id @default(uuid())
  benchmarkResultId String        @map("benchmark_result_id")
  reasoningType     ReasoningType @map("reasoning_type")
  content           Json
  sequenceOrder     Int?          @map("sequence_order")
  confidenceLevel   Float?        @map("confidence_level")
  processingTimeMs  Int?          @map("processing_time_ms")
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  createdBy         String?       @map("created_by")
  updatedAt         DateTime?     @updatedAt @map("updated_at")
  updatedBy         String?       @map("updated_by")

  benchmarkResult BenchmarkResult @relation(fields: [benchmarkResultId], references: [id], onDelete: Cascade)
  createdByUser   User?           @relation("ReasoningEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser   User?           @relation("ReasoningEntryUpdatedBy", fields: [updatedBy], references: [id])

  @@index([benchmarkResultId])
  @@index([reasoningType])
  @@index([sequenceOrder])
  @@map("reasoning_entries")
}

model Update {
  id          String    @id @default(uuid())
  date        DateTime  @db.Date
  title       String
  tag         String
  note        String?
  imageUrl    String?   @map("image_url")
  isPublished Boolean   @default(true) @map("is_published")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  createdByUser User?            @relation("UpdateCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?            @relation("UpdateUpdatedBy", fields: [updatedBy], references: [id])
  reactions     UpdateReaction[]

  @@index([date])
  @@index([tag])
  @@index([isPublished])
  @@map("updates")
}

model UpdateReaction {
  id        String   @id @default(uuid())
  updateId  String   @map("update_id")
  userId    String   @map("user_id")
  emojiType String   @map("emoji_type")
  createdAt DateTime @default(now()) @map("created_at")

  update Update @relation(fields: [updateId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([updateId, userId, emojiType])
  @@index([updateId])
  @@index([userId])
  @@map("update_reactions")
}

model Suggestion {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("open_vote")
  voteCount   Int       @default(0) @map("vote_count")
  isVisible   Boolean   @default(true) @map("is_visible")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  createdByUser User?            @relation("SuggestionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?            @relation("SuggestionUpdatedBy", fields: [updatedBy], references: [id])
  votes         SuggestionVote[]

  @@index([status])
  @@index([voteCount])
  @@index([isVisible])
  @@index([createdAt])
  @@map("suggestions")
}

model SuggestionVote {
  id           String    @id @default(uuid())
  suggestionId String    @map("suggestion_id")
  userId       String    @map("user_id")
  voteValue    Int       @map("vote_value")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  suggestion Suggestion @relation(fields: [suggestionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([suggestionId, userId])
  @@index([suggestionId])
  @@index([userId])
  @@map("suggestion_votes")
}

model TeamMember {
  id           String    @id @default(uuid())
  userId       String    @unique @map("user_id")
  displayName  String    @map("display_name")
  role         String
  bio          String?
  avatarUrl    String?   @map("avatar_url")
  displayOrder Int?      @map("display_order")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  createdBy    String?   @map("created_by")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  updatedBy    String?   @map("updated_by")

  user          User  @relation("TeamMemberUser", fields: [userId], references: [id])
  createdByUser User? @relation("TeamMemberCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("TeamMemberUpdatedBy", fields: [updatedBy], references: [id])

  @@index([isActive])
  @@index([displayOrder])
  @@map("team_members")
}

model Model {
  id            String    @id @default(uuid())
  name          String    @unique
  modelFamilyId String    @map("model_family_id")
  developer     String
  description   String?
  createdAt     DateTime  @default(now()) @map("created_at")
  createdBy     String?   @map("created_by")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  updatedBy     String?   @map("updated_by")

  versions           ModelVersion[]
  toolConfigurations ToolConfiguration[]
  modelFamily        ModelFamily         @relation(fields: [modelFamilyId], references: [id])
  createdByUser      User?               @relation("ModelCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User?               @relation("ModelUpdatedBy", fields: [updatedBy], references: [id])

  @@index([modelFamilyId])
  @@index([developer])
  @@index([name])
  @@map("models")
}

model ModelVersion {
  id              String    @id @default(uuid())
  modelId         String    @map("model_id")
  version         String
  releaseDate     DateTime? @map("release_date") @db.Date
  deprecationDate DateTime? @map("deprecation_date") @db.Date
  isLatest        Boolean   @default(false) @map("is_latest")
  isAvailable     Boolean   @default(true) @map("is_available")
  createdAt       DateTime  @default(now()) @map("created_at")
  createdBy       String?   @map("created_by")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  updatedBy       String?   @map("updated_by")

  model               Model                     @relation(fields: [modelId], references: [id])
  createdByUser       User?                     @relation("ModelVersionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser       User?                     @relation("ModelVersionUpdatedBy", fields: [updatedBy], references: [id])
  evaluationEntities  EvaluationEntity[]
  benchmarkResults    BenchmarkResult[]
  hyperparameterLinks ModelHyperparameterLink[]
  scoreAggregates     BenchmarkScoreAggregate[]
  bigFiveProfile      BigFiveProfile?

  @@unique([modelId, version])
  @@index([modelId])
  @@index([version])
  @@index([isLatest])
  @@index([isAvailable])
  @@map("model_versions")
}

model ModelFamily {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String?   @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy String?   @map("updated_by")

  models        Model[]
  createdByUser User?   @relation("ModelFamilyCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?   @relation("ModelFamilyUpdatedBy", fields: [updatedBy], references: [id])

  @@map("model_families")
}

model Tool {
  id        String    @id @default(uuid())
  name      String    @unique
  version   String?
  developer String?
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String?   @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  updatedBy String?   @map("updated_by")

  createdByUser  User?               @relation("ToolCreatedBy", fields: [createdBy], references: [id])
  updatedByUser  User?               @relation("ToolUpdatedBy", fields: [updatedBy], references: [id])
  configurations ToolConfiguration[]

  @@index([developer])
  @@map("tools")
}

model ToolConfiguration {
  id                    String    @id @default(uuid())
  toolId                String    @map("tool_id")
  modelId               String    @map("model_id")
  configurationName     String    @map("configuration_name")
  configurationSettings Json?     @map("configuration_settings")
  isActive              Boolean   @default(true) @map("is_active")
  createdAt             DateTime  @default(now()) @map("created_at")
  createdBy             String?   @map("created_by")
  updatedAt             DateTime? @updatedAt @map("updated_at")
  updatedBy             String?   @map("updated_by")

  tool               Tool               @relation(fields: [toolId], references: [id])
  model              Model              @relation(fields: [modelId], references: [id])
  createdByUser      User?              @relation("ToolConfigCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User?              @relation("ToolConfigUpdatedBy", fields: [updatedBy], references: [id])
  evaluationEntities EvaluationEntity[]
  benchmarkResults   BenchmarkResult[]

  @@unique([toolId, modelId])
  @@index([modelId])
  @@index([isActive])
  @@map("tool_configurations")
}

model EvaluationEntity {
  id                  String     @id @default(uuid())
  entityType          EntityType @map("entity_type")
  modelVersionId      String?    @map("model_version_id")
  toolConfigurationId String?    @map("tool_configuration_id")
  createdAt           DateTime   @default(now()) @map("created_at")
  createdBy           String?    @map("created_by")
  updatedAt           DateTime?  @updatedAt @map("updated_at")
  updatedBy           String?    @map("updated_by")

  modelVersion           ModelVersion?             @relation(fields: [modelVersionId], references: [id])
  toolConfiguration      ToolConfiguration?        @relation(fields: [toolConfigurationId], references: [id])
  createdByUser          User?                     @relation("EvaluationEntityCreatedBy", fields: [createdBy], references: [id])
  updatedByUser          User?                     @relation("EvaluationEntityUpdatedBy", fields: [updatedBy], references: [id])
  techProfileAnswers     TechProfileAnswer[]
  responseProfileAnswers ResponseProfileAnswer[]
  reviewAssignments      ProfileReviewAssignment[]

  @@index([entityType])
  @@index([modelVersionId])
  @@index([toolConfigurationId])
  @@map("evaluation_entities")
}

model BigFiveProfile {
  id                String    @id @default(uuid())
  modelVersionId    String    @unique @map("model_version_id")
  modelFamily       String?   @map("model_family")
  openness          Int
  conscientiousness Int
  extraversion      Int
  agreeableness     Int
  neuroticism       Int
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  modelVersion ModelVersion @relation(fields: [modelVersionId], references: [id])

  @@index([modelFamily])
  @@map("big_five_profiles")
}

// ==================== ENUMS ====================
enum EntityType {
  MODEL_VERSION      @map("model_version")
  TOOL_CONFIGURATION @map("tool_configuration")
}

enum QuestionType {
  BOOLEAN @map("boolean")
  NUMBER  @map("number")
  TEXT    @map("text")
  LIST    @map("list")
}

enum ReviewStatus {
  NOT_STARTED @map("not_started")
  IN_PROGRESS @map("in_progress")
  SUBMITTED   @map("submitted")
  APPROVED    @map("approved")
  REJECTED    @map("rejected")
}

enum UserRole {
  USER       @map("user")
  RESEARCHER @map("researcher")
}

enum ExpertiseCategory {
  EXPERT       @map("expert")
  PROFESSIONAL @map("professional")
  TRAINEE      @map("trainee")
  STUDENT      @map("student")
  PUBLIC       @map("public")
}

enum ReasoningType {
  CHAIN_OF_THOUGHT @map("chain_of_thought")
  EXPLANATION      @map("explanation")
  WORKING          @map("working")
  REFLECTION       @map("reflection")
}

enum AdversarialType {
  RED_HERRING        @map("red_herring")
  TEMPORAL_ANCHORING @map("temporal_anchoring")
  COGNITIVE_BIAS     @map("cognitive_bias")
  CONTEXT_CONFUSION  @map("context_confusion")
  PREMISE_DISTORTION @map("premise_distortion")
}

model Hyperparameter {
  id            String    @id @default(uuid())
  name          String    @unique
  displayName   String    @map("display_name")
  parameterType String    @map("parameter_type")
  description   String?
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  createdBy     String?   @map("created_by")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  updatedBy     String?   @map("updated_by")

  createdByUser User?                     @relation("HyperparameterCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?                     @relation("HyperparameterUpdatedBy", fields: [updatedBy], references: [id])
  modelLinks    ModelHyperparameterLink[]

  @@index([name])
  @@index([isActive])
  @@map("hyperparameters")
}

model ModelHyperparameterLink {
  id               String    @id @default(uuid())
  modelVersionId   String    @map("model_version_id")
  hyperparameterId String    @map("hyperparameter_id")
  isConfigurable   Boolean   @default(true) @map("is_configurable")
  isRequired       Boolean   @default(false) @map("is_required")
  lockedValue      Json?     @map("locked_value")
  lockedAt         DateTime? @map("locked_at")
  lockedReason     String?   @map("locked_reason")
  minValue         Decimal?  @map("min_value")
  maxValue         Decimal?  @map("max_value")
  stepValue        Decimal?  @map("step_value")
  allowedValues    Json?     @map("allowed_values")
  defaultValue     Json?     @map("default_value")
  uiComponent      String?   @map("ui_component")
  uiOrder          Int       @default(0) @map("ui_order")
  helpText         String?   @map("help_text")
  createdAt        DateTime  @default(now()) @map("created_at")
  createdBy        String?   @map("created_by")
  updatedAt        DateTime? @updatedAt @map("updated_at")
  updatedBy        String?   @map("updated_by")

  modelVersion   ModelVersion   @relation(fields: [modelVersionId], references: [id])
  hyperparameter Hyperparameter @relation(fields: [hyperparameterId], references: [id])
  createdByUser  User?          @relation("ModelHyperparameterLinkCreatedBy", fields: [createdBy], references: [id])
  updatedByUser  User?          @relation("ModelHyperparameterLinkUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([modelVersionId, hyperparameterId])
  @@index([modelVersionId])
  @@index([hyperparameterId])
  @@index([isConfigurable])
  @@map("model_hyperparameter_links")
}

model ResponseProfileTest {
  id          String    @id @default(uuid())
  name        String
  description String?
  testType    String    @map("test_type")
  version     Int       @default(1)
  isValidated Boolean   @default(false) @map("is_validated")
  isPublic    Boolean   @default(false) @map("is_public")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  questions ResponseProfileQuestion[]

  @@map("response_profile_test")
}

model ResponseProfileQuestion {
  id           String       @id @default(uuid())
  testId       String?      @map("test_id")
  questionType QuestionType @map("question_type")
  questionKey  String       @map("question_key")
  questionText String       @map("question_text")
  category     String
  displayOrder Int          @map("display_order")
  isActive     Boolean      @default(true) @map("is_active")
  isDisplayed  Boolean      @default(true) @map("is_displayed")
  createdAt    DateTime     @default(now()) @map("created_at")
  createdBy    String?      @map("created_by")
  updatedAt    DateTime?    @updatedAt @map("updated_at")
  updatedBy    String?      @map("updated_by")

  test          ResponseProfileTest?    @relation(fields: [testId], references: [id])
  createdByUser User?                   @relation("ResponseQuestionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?                   @relation("ResponseQuestionUpdatedBy", fields: [updatedBy], references: [id])
  answers       ResponseProfileAnswer[]

  @@unique([questionText, questionKey])
  @@map("response_profile_questions")
}

model ResponseProfileAnswer {
  id                 String     @id @default(uuid())
  questionId         String     @map("question_id")
  entityType         EntityType @map("entity_type")
  entityId           String     @map("entity_id")
  evaluationEntityId String     @map("evaluation_entity_id")
  booleanValue       Boolean?   @map("boolean_value")
  numericValue       Decimal?   @map("numeric_value")
  textValue          String?    @map("text_value")
  listValue          String?    @map("list_value")
  notes              String?
  reviewerId         String     @map("reviewer_id")
  reviewAssignmentId String?    @map("review_assignment_id")
  isApproved         Boolean    @default(false) @map("is_approved")
  createdAt          DateTime   @default(now()) @map("created_at")
  createdBy          String?    @map("created_by")
  approvedAt         DateTime?  @map("approved_at")
  approvedBy         String?    @map("approved_by")

  question         ResponseProfileQuestion  @relation(fields: [questionId], references: [id])
  reviewer         User                     @relation("ResponseProfileReviewer", fields: [reviewerId], references: [id])
  approver         User?                    @relation("ResponseProfileApprover", fields: [approvedBy], references: [id])
  createdByUser    User?                    @relation("ResponseProfileCreatedBy", fields: [createdBy], references: [id])
  reviewAssignment ProfileReviewAssignment? @relation(fields: [reviewAssignmentId], references: [id])
  evaluationEntity EvaluationEntity         @relation(fields: [evaluationEntityId], references: [id])

  @@index([questionId, isApproved, createdAt])
  @@index([evaluationEntityId])
  @@index([reviewAssignmentId])
  @@index([isApproved, createdAt])
  @@map("response_profile_answers")
}

model ProfileReviewAssignment {
  id                 String       @id @default(uuid())
  reviewerId         String       @map("reviewer_id")
  entityType         EntityType   @map("entity_type")
  entityId           String       @map("entity_id")
  evaluationEntityId String       @map("evaluation_entity_id")
  assignedAt         DateTime     @default(now()) @map("assigned_at")
  assignedBy         String?      @map("assigned_by")
  dueDate            DateTime?    @map("due_date")
  status             ReviewStatus @default(NOT_STARTED)
  completedAt        DateTime?    @map("completed_at")
  notes              String?

  reviewer           User                    @relation("ReviewerAssignments", fields: [reviewerId], references: [id])
  assigner           User?                   @relation("AssignedReviews", fields: [assignedBy], references: [id])
  evaluationEntity   EvaluationEntity        @relation(fields: [evaluationEntityId], references: [id])
  techProfileAnswers TechProfileAnswer[]
  responseAnswers    ResponseProfileAnswer[]

  @@unique([reviewerId, entityType, entityId])
  @@index([reviewerId, status])
  @@index([status])
  @@index([evaluationEntityId])
  @@map("profile_review_assignments")
}

model SystemConfig {
  id          String    @id @default(uuid())
  key         String    @unique
  value       Json
  description String?
  configType  String    @default("general") @map("config_type")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String?   @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  updatedBy   String?   @map("updated_by")

  createdByUser User? @relation("SystemConfigCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("SystemConfigUpdatedBy", fields: [updatedBy], references: [id])

  @@index([configType])
  @@map("system_config")
}

model TechProfileQuestion {
  id            String       @id @default(uuid())
  entityType    EntityType   @map("entity_type")
  questionKey   String       @map("question_key")
  questionText  String       @map("question_text")
  questionLabel String?      @map("question_label")
  category      String
  questionType  QuestionType @map("question_type")
  displayOrder  Int          @map("display_order")
  isActive      Boolean      @default(true) @map("is_active")
  isDisplayed   Boolean      @default(true) @map("is_displayed")
  isFilterable  Boolean      @default(false) @map("is_filterable")
  filterType    String?      @map("filter_type")
  filterConfig  Json?        @map("filter_config")
  createdAt     DateTime     @default(now()) @map("created_at")
  createdBy     String?      @map("created_by")
  updatedAt     DateTime?    @updatedAt @map("updated_at")
  updatedBy     String?      @map("updated_by")

  createdByUser User?               @relation("TechQuestionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?               @relation("TechQuestionUpdatedBy", fields: [updatedBy], references: [id])
  answers       TechProfileAnswer[]

  @@unique([entityType, questionKey])
  @@index([entityType, isActive])
  @@index([isDisplayed, displayOrder])
  @@map("tech_profile_questions")
}

model TechProfileAnswer {
  id                 String     @id @default(uuid())
  entityType         EntityType @map("entity_type")
  entityId           String     @map("entity_id")
  evaluationEntityId String     @map("evaluation_entity_id")
  questionId         String     @map("question_id")
  answer             Json       @map("answer")
  notes              String?
  reviewerId         String?    @map("reviewer_id")
  reviewAssignmentId String?    @map("review_assignment_id")
  isApproved         Boolean    @default(false) @map("is_approved")
  createdAt          DateTime   @default(now()) @map("created_at")
  createdBy          String?    @map("created_by")
  approvedAt         DateTime?  @map("approved_at")
  approvedBy         String?    @map("approved_by")

  question         TechProfileQuestion      @relation(fields: [questionId], references: [id])
  reviewer         User?                    @relation("TechProfileReviewer", fields: [reviewerId], references: [id])
  approver         User?                    @relation("TechProfileApprover", fields: [approvedBy], references: [id])
  createdByUser    User?                    @relation("TechProfileCreatedBy", fields: [createdBy], references: [id])
  reviewAssignment ProfileReviewAssignment? @relation(fields: [reviewAssignmentId], references: [id])
  evaluationEntity EvaluationEntity         @relation(fields: [evaluationEntityId], references: [id])

  @@index([entityId, questionId, isApproved, createdAt])
  @@index([evaluationEntityId])
  @@index([reviewAssignmentId])
  @@index([isApproved, createdAt])
  @@map("tech_profile_answers")
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  username            String    @unique
  passwordHash        String    @map("password_hash")
  role                UserRole  @default(USER)
  firstName           String?   @map("first_name")
  lastName            String?   @map("last_name")
  isActive            Boolean   @default(true) @map("is_active")
  isVerified          Boolean   @default(false) @map("is_verified")
  emailVerifiedAt     DateTime? @map("email_verified_at")
  lastLoginAt         DateTime? @map("last_login_at")
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime? @map("locked_until")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  // Models/Tools
  modelsCreated             Model[]             @relation("ModelCreatedBy")
  modelsUpdated             Model[]             @relation("ModelUpdatedBy")
  modelVersionsCreated      ModelVersion[]      @relation("ModelVersionCreatedBy")
  modelVersionsUpdated      ModelVersion[]      @relation("ModelVersionUpdatedBy")
  toolsCreated              Tool[]              @relation("ToolCreatedBy")
  toolsUpdated              Tool[]              @relation("ToolUpdatedBy")
  toolConfigsCreated        ToolConfiguration[] @relation("ToolConfigCreatedBy")
  toolConfigsUpdated        ToolConfiguration[] @relation("ToolConfigUpdatedBy")
  evaluationEntitiesCreated EvaluationEntity[]  @relation("EvaluationEntityCreatedBy")
  evaluationEntitiesUpdated EvaluationEntity[]  @relation("EvaluationEntityUpdatedBy")
  modelFamiliesCreated      ModelFamily[]       @relation("ModelFamilyCreatedBy")
  modelFamiliesUpdated      ModelFamily[]       @relation("ModelFamilyUpdatedBy")

  // Reviews & Qs
  reviewAssignments        ProfileReviewAssignment[] @relation("ReviewerAssignments")
  assignedReviews          ProfileReviewAssignment[] @relation("AssignedReviews")
  techProfileAnswers       TechProfileAnswer[]       @relation("TechProfileReviewer")
  techProfileApprovals     TechProfileAnswer[]       @relation("TechProfileApprover")
  techProfileCreated       TechProfileAnswer[]       @relation("TechProfileCreatedBy")
  responseProfileAnswers   ResponseProfileAnswer[]   @relation("ResponseProfileReviewer")
  responseProfileApprovals ResponseProfileAnswer[]   @relation("ResponseProfileApprover")
  responseProfileCreated   ResponseProfileAnswer[]   @relation("ResponseProfileCreatedBy")
  techQuestionsCreated     TechProfileQuestion[]     @relation("TechQuestionCreatedBy")
  techQuestionsUpdated     TechProfileQuestion[]     @relation("TechQuestionUpdatedBy")
  responseQuestionsCreated ResponseProfileQuestion[] @relation("ResponseQuestionCreatedBy")
  responseQuestionsUpdated ResponseProfileQuestion[] @relation("ResponseQuestionUpdatedBy")

  // Hyperparams
  hyperparametersCreated     Hyperparameter[]          @relation("HyperparameterCreatedBy")
  hyperparametersUpdated     Hyperparameter[]          @relation("HyperparameterUpdatedBy")
  hyperparameterLinksCreated ModelHyperparameterLink[] @relation("ModelHyperparameterLinkCreatedBy")
  hyperparameterLinksUpdated ModelHyperparameterLink[] @relation("ModelHyperparameterLinkUpdatedBy")

  // Benchmarking
  benchmarkScalesCreated BenchmarkScale[]              @relation("BenchmarkScaleCreatedBy")
  benchmarkScalesUpdated BenchmarkScale[]              @relation("BenchmarkScaleUpdatedBy")
  questionSubmissions    BenchmarkQuestionSubmission[]
  questionsCreated       BenchmarkQuestion[]           @relation("BenchmarkQuestionCreatedBy")
  questionsUpdated       BenchmarkQuestion[]           @relation("BenchmarkQuestionUpdatedBy")
  questionRatings        BenchmarkRating[]
  experiments            BenchmarkExperiment[]
  experimentsUpdated     BenchmarkExperiment[]         @relation("ExperimentUpdatedBy")
  experimentsReviewed    BenchmarkExperiment[]         @relation("ExperimentReviewer")
  promptsCreated         BenchmarkPrompt[]             @relation("BenchmarkPromptCreatedBy")
  promptsUpdated         BenchmarkPrompt[]             @relation("BenchmarkPromptUpdatedBy")
  tagsCreated            BenchmarkTag[]                @relation("BenchmarkTagCreatedBy")
  tagsUpdated            BenchmarkTag[]                @relation("BenchmarkTagUpdatedBy")

  // Community
  updatesCreated     Update[]         @relation("UpdateCreatedBy")
  updatesUpdated     Update[]         @relation("UpdateUpdatedBy")
  updateReactions    UpdateReaction[]
  suggestionsCreated Suggestion[]     @relation("SuggestionCreatedBy")
  suggestionsUpdated Suggestion[]     @relation("SuggestionUpdatedBy")
  suggestionVotes    SuggestionVote[]
  teamMemberProfile  TeamMember?      @relation("TeamMemberUser")
  teamMembersCreated TeamMember[]     @relation("TeamMemberCreatedBy")
  teamMembersUpdated TeamMember[]     @relation("TeamMemberUpdatedBy")

  // Auth & Expertise
  sessions             UserSession[]
  emailVerifications   EmailVerificationToken[]
  passwordResets       PasswordResetToken[]
  permissions          UserPermission[]              @relation("UserPermissions")
  permissionsGranted   UserPermission[]              @relation("PermissionGranter")
  questionReviews      BenchmarkQuestionSubmission[] @relation("QuestionReviewer")
  expertiseHistory     UserExpertiseHistory[]        @relation("UserExpertiseHistory")
  expertiseAssignments UserExpertiseHistory[]        @relation("ExpertiseAssigner")

  // Reasoning & System
  reasoningEntriesCreated ReasoningEntry[] @relation("ReasoningEntryCreatedBy")
  reasoningEntriesUpdated ReasoningEntry[] @relation("ReasoningEntryUpdatedBy")
  systemConfigsCreated    SystemConfig[]   @relation("SystemConfigCreatedBy")
  systemConfigsUpdated    SystemConfig[]   @relation("SystemConfigUpdatedBy")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model UserExpertiseHistory {
  id             String            @id @default(uuid())
  userId         String            @map("user_id")
  expertiseLevel ExpertiseCategory @map("expertise_level")
  effectiveFrom  DateTime          @default(now()) @map("effective_from")
  effectiveTo    DateTime?         @map("effective_to")
  assignedBy     String?           @map("assigned_by")
  notes          String?
  createdAt      DateTime          @default(now()) @map("created_at")

  user     User  @relation("UserExpertiseHistory", fields: [userId], references: [id], onDelete: Cascade)
  assigner User? @relation("ExpertiseAssigner", fields: [assignedBy], references: [id])

  @@index([userId, effectiveFrom, effectiveTo])
  @@index([userId])
  @@map("user_expertise_history")
}

model UserPermission {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  permission String
  grantedBy  String?   @map("granted_by")
  grantedAt  DateTime  @default(now()) @map("granted_at")
  revokedAt  DateTime? @map("revoked_at")

  user    User  @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade)
  granter User? @relation("PermissionGranter", fields: [grantedBy], references: [id])

  @@unique([userId, permission])
  @@index([userId])
  @@index([permission])
  @@map("user_permissions")
}
